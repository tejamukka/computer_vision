
#include "opencv2/highgui.hpp"
#include <iostream>
#include <tuple>

using namespace cv;
using namespace std;


std::tuple<double, double, double>	convertNonLinRGB_2_LinRGB(double R, double G, double B) {
	
		double Lin_R, Lin_G, Lin_B;
		if (R < 0) {
			R = 0;
		}
	
		if (R > 1) {
			R = 1;
		}
	
		if (G < 0) {
			G = 0;
		}
		if (G > 1) {
			G = 1;
		}
		if (B < 0) {
			B = 0;
		}
		if (B > 1) {
			B = 1;
		}
	
		if (R < 0.03928) {
			Lin_R = R / 12.92;
		}
		else {
			Lin_R = pow(((R+0.055)/1.055),2.4);

		}

		if (G < 0.03928) {
			Lin_G = G / 12.92;
		}
		else {
			Lin_G = pow(((G + 0.055) / 1.055), 2.4);

		}

		if (B< 0.03928) {
			Lin_B = B / 12.92;
		}
		else {
			Lin_B = pow(((B + 0.055) / 1.055), 2.4);
		}



		return std::make_tuple(Lin_R, Lin_G, Lin_B);
	}
	


std::tuple<double, double, double>	convertLinRGB_2_XYZ(double R, double G, double B) {
	double x,y,z;
	if (R < 0) {
		R = 0;
	}

	if (R > 1) {
		R = 1;
	}

	if (G < 0) {
		G = 0;
	}
	if (G > 1) {
		G = 1;
	}
	if (B < 0) {
		B = 0;
	}
	if (B > 1) {
		B = 1;
	}

	x = (0.412453*R) + (0.35758*G) + (0.180423*B);
	y = (0.212671*R) + (0.71516*G) + (0.072169*B);
	z = (0.019334*R) + (0.119193*G) + (0.950227*B);

	return std::make_tuple(x, y, z);
}

std::tuple<double, double, double>	convertXYZ_2_LUV(double X, double Y, double Z) {
	double L,u,v;
	double denom = 0.95 + 15 + (3 * 1.09);
	double u_w = (4 * (0.95)) / denom;
	double v_w = 9 / denom;
	double t = Y;
	if (t > 0.008856) {
		L = 116 * (pow(t, 0.3333)) - 16;
	}
	else {
		L = 903.3*t;
	}
	if (L < 0) {
		L = 0;
	}
	if (L > 100) {
		L = 100;
	}
	double  d = X + 15 * Y + 3 * Z;
	double u_dash = (4 * X) / d;
	double v_dash = (9 * Y) / d;
	u = 13 * L*(u_dash - u_w);
	v = 13 * L*(v_dash - v_w);
	return std::make_tuple(L,u,v);
	}
	

double linearScale_Luv(double L,double min,double max) {
	double l_scaled = 0;
	l_scaled = ((L - min) * 100) / (max - min);

	return l_scaled;

}

std::tuple<double, double, double> convertLUV_2_XYZ(double L, double u, double v) {
	double L_X, L_Y, L_Z;
	double denom = 0.95 + 15 + (3 * 1.09);
	double u_w = (4 * (0.95)) / denom;
	double v_w = 9 / denom;
	double denom2 = 13 * L;
	double u_dash = (u + 13 * (u_w)*L) / denom2;
	double v_dash = (v + 13 * (v_w)*L) / denom2;
	if (L > 7.9996) {
		double temp = (L + 16) / 116;
		L_Y = pow(temp, 3);
	}
	else {
		L_Y = L / 903.3;
	}

	L_X = L_Y *2.25*(u_dash / v_dash);
	L_Z = L_Y*((3 - (.75*u_dash) - 5 * v_dash) / v_dash);
	return std::make_tuple(L_X, L_Y, L_Z);

}


std::tuple<double, double, double>	convertXYZtoRGB(double X, double Y, double Z) {
	double lin_R, lin_G, lin_B;
	lin_R = (3.240479*X) - (1.537515*Y) - (0.498535*Z);
	lin_G = (-0.969256*X) + (1.875991*Y) + (0.041556*Z);
	lin_B = (0.055648*X) - (0.2040431*Y) + (1.057311*Z);

	return std::make_tuple(lin_R, lin_G, lin_B);
}

std::tuple<double, double, double>	convertLinRGB_2_NonlinRGB(double R, double G, double B) {

	double nonLin_R, nonLin_G, nonLin_B;
	if (R < 0) {
		R = 0;
	}

	if (R > 1) {
		R = 1;
	}

	if (G < 0) {
		G = 0;
	}
	if (G > 1) {
		G = 1;
	}
	if (B < 0) {
		B = 0;
	}
	if (B > 1) {
		B = 1;
	}

	if (R < 0.00304) {
		nonLin_R = 12.92*R;
	}
	else {
		nonLin_R = 1.055*pow(R, (1 / 2.4)) - 0.055;
	}

	if (G < 0.00304) {
		nonLin_G = 12.92*G;
	}
	else {
		nonLin_G = 1.055*pow(G, (1 / 2.4)) - 0.055;
	}
	if (B < 0.00304) {
		nonLin_B = 12.92*B;
	}
	else {
		nonLin_B = 1.055*pow(B, (1 / 2.4)) - 0.055;
	}
	return std::make_tuple(nonLin_R, nonLin_G, nonLin_B);
}





void runOnWindow(int W1, int H1, int W2, int H2, Mat inputImage, char *outName) {
	int rows = inputImage.rows;
	int cols = inputImage.cols;

	vector<Mat> i_planes;
	split(inputImage, i_planes);
	Mat iB = i_planes[0];
	Mat iG = i_planes[1];
	Mat iR = i_planes[2];

	// dynamically allocate RGB arrays of size rows x cols
	int** R = new int*[rows];
	int** G = new int*[rows];
	int** B = new int*[rows];
	int** L = new int*[rows];
	int** L_scaled = new int*[rows];
	int** u = new int*[rows];
	int** v = new int*[rows];

	for (int i = 0; i < rows; i++) {
		R[i] = new int[cols];
		G[i] = new int[cols];
		B[i] = new int[cols];
		L[i] = new int[cols];
		u[i] = new int[cols];
		v[i] = new int[cols];

	}
	double L_max, L_min;
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) {
			R[i][j] = iR.at<uchar>(i, j);
			G[i][j] = iG.at<uchar>(i, j);
			B[i][j] = iB.at<uchar>(i, j);
		}

	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) {
			/*R[i][j] = R[i][j] / 255;
			G[i][j] = G[i][j] / 255;
			B[i][j] = B[i][j] / 255;
*/
			R[i][j] = R[i][j];
			G[i][j] = G[i][j];
			B[i][j] = B[i][j] ;
			double Lin_R, Lin_G, Lin_B;
			tie(Lin_R, Lin_G, Lin_B) = convertNonLinRGB_2_LinRGB(R[i][j], G[i][j], B[i][j]);
			double new_X, new_Y, new_Z;
			tie(new_X, new_Y, new_Z) = convertLinRGB_2_XYZ(Lin_R, Lin_G, Lin_B);
			double new_L, new_U, new_V;
			tie(L[i][j],u[i][j],v[i][j]) = convertXYZ_2_LUV(new_X, new_Y, new_Z);


			/*double new_L_scaled, new_U, new_V;
			tie(new_L, new_U, new_V) = convertXYZ_2_LUV(new_X, new_Y, new_Z);
*/
			
		}

	for (int i = H1; i <= H2; i++)
		for (int j = W1; j <= W2; j++) {
			//double L_min, L_max;
			L_min = 100; L_max = 0;
			if (L[i][j] < L_min) {
				L_min = L[i][j];
			}
			if (L[i][j] > L_max) {
				L_max = L[i][j];
			}
		}

	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) {
			
			L_scaled[i][j] = linearScale_Luv(L[i][j],L_min,L_max);
			if (L_scaled[i][j] < 0) {
				L_scaled[i][j] = 0;
			}
			if (L_scaled[i][j] > 100) {
				L_scaled[i][j] = 100;
			}
			double new_X, new_Y, new_Z;
			tie(new_X, new_Y, new_Z) = convertLUV_2_XYZ(L_scaled[i][j],u[i][j],v[i][j]);

			double lin_R, lin_G, lin_B;
			tie(lin_R, lin_G, lin_B) = convertXYZtoRGB(new_X, new_Y, new_Z);
			double nonlin_R, nonlin_G, nonlin_B;
			tie(nonlin_R, nonlin_G, nonlin_B) = convertLinRGB_2_NonlinRGB(lin_R, lin_G, lin_B);
			R[i][j] = nonlin_R;
			G[i][j] = nonlin_G;
			B[i][j] = nonlin_B;

		}


	//	   The transformation should be based on the
	//	   historgram of the pixels in the W1,W2,H1,H2 range.
	//	   The following code goes over these pixels

	for (int i = H1; i <= H2; i++)
		for (int j = W1; j <= W2; j++) {
			double r = R[i][j];
			double g = G[i][j];
			double b = B[i][j];
			int gray = (int)(0.3*r + 0.6*g + 0.1*b + 0.5);

			R[i][j] = G[i][j] = B[i][j] = gray;
		}






	Mat oR(rows, cols, CV_8UC1);
	Mat oG(rows, cols, CV_8UC1);
	Mat oB(rows, cols, CV_8UC1);
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++) {
			oR.at<uchar>(i, j) = R[i][j];;
			oG.at<uchar>(i, j) = G[i][j];;
			oB.at<uchar>(i, j) = B[i][j];;
		}

	Mat o_planes[] = { oB, oG, oR };
	Mat outImage;
	merge(o_planes, 3, outImage);

	namedWindow("output", CV_WINDOW_AUTOSIZE);
	imshow("output", outImage);
	imwrite(outName, outImage);
}

int main(int argc, char** argv) {
	/*if (argc != 7) {
		cerr << argv[0] << ": "
			<< "got " << argc - 1
			<< " arguments. Expecting six: w1 h1 w2 h2 ImageIn ImageOut."
			<< endl;
		cerr << "Example: proj1b 0.2 0.1 0.8 0.5 fruits.jpg out.bmp" << endl;
		return(-1);
	}*/

	double w1 = 0.3;
	double h1 = 0.3;
	double w2 = 0.7;
	double h2 = 0.7;
	char *inputName = "C:\\Users\\tejamukka\\Desktop\\fruits.jpg";
	char *outputName = "output.bmp";
/*
	double w1 = atof(argv[1]);
	double h1 = atof(argv[2]);
	double w2 = atof(argv[3]);
	double h2 = atof(argv[4]);`
	char *inputName = argv[5];
	char *outputName = argv[6];
*/
	if (w1<0 || h1<0 || w2 <= w1 || h2 <= h1 || w2>1 || h2>1) {
		cerr << " arguments must satisfy 0 <= w1 < w2 <= 1"
			<< " ,  0 <= h1 < h2 <= 1" << endl;
		return(-1);
	}

	Mat inputImage = imread(inputName, CV_LOAD_IMAGE_UNCHANGED);
	if (inputImage.empty()) {
		cout << "Could not open or find the image " << inputName << endl;
		return(-1);
	}

	string windowInput("input: ");
	windowInput += inputName;

	namedWindow(windowInput, CV_WINDOW_AUTOSIZE);
	imshow(windowInput, inputImage);

	if (inputImage.type() != CV_8UC3) {
		cout << inputName << " is not a standard color image  " << endl;
		return(-1);
	}

	int rows = inputImage.rows;
	int cols = inputImage.cols;
	int W1 = (int)(w1*(cols - 1));
	int H1 = (int)(h1*(rows - 1));
	int W2 = (int)(w2*(cols - 1));
	int H2 = (int)(h2*(rows - 1));

	runOnWindow(W1, H1, W2, H2, inputImage, outputName);

	waitKey(0); // Wait for a keystroke
	return(0);
}





//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//.
//
//
//
//
//
//
//
//
//#include "opencv2/highgui.hpp"
//#include <iostream>
//#include <tuple>
//#include <math.h>
//
//
//using namespace cv;
//using namespace std;
//
//
//std::tuple<double, double, double>	convertXYZtoRGB(double X, double Y, double Z) {
//	double lin_R, lin_G, lin_B;
//	lin_R = (3.240479*X) - (1.537515*Y) - (0.498535*Z);
//	lin_G = (-0.969256*X) + (1.875991*Y) + (0.041556*Z);
//	lin_B = (0.055648*X) - (0.2040431*Y) + (1.057311*Z);
//
//	return std::make_tuple(lin_R, lin_G, lin_B);
//}
//
//std::tuple<double, double, double>	convertLinRGB_2_NonlinRGB(double R, double G, double B) {
//
//	double nonLin_R, nonLin_G, nonLin_B;
//	if (R < 0) {
//		R = 0;
//	}
//
//	if (R > 1) {
//		R = 1;
//	}
//
//	if (G < 0) {
//		G = 0;
//	}
//	if (G > 1) {
//		G = 1;
//	}
//	if (B < 0) {
//		B = 0;
//	}
//	if (B > 1) {
//		B = 1;
//	}
//
//	if (R < 0.00304) {
//		nonLin_R = 12.92*R;
//	}
//	else {
//		nonLin_R = 1.055*pow(R, (1 / 2.4)) - 0.055;
//	}
//
//	if (G < 0.00304) {
//		nonLin_G = 12.92*G;
//	}
//	else {
//		nonLin_G = 1.055*pow(G, (1 / 2.4)) - 0.055;
//	}
//	if (B < 0.00304) {
//		nonLin_B = 12.92*B;
//	}
//	else {
//		nonLin_B = 1.055*pow(B, (1 / 2.4)) - 0.055;
//	}
//	return std::make_tuple(nonLin_R, nonLin_G, nonLin_B);
//}
//
//
//
//std::tuple<double, double, double> convertLuv2XYZ(double L, double u, double v) {
//	double L_X, L_Y, L_Z;
//	double denom = 0.95 + 15 + (3 * 1.09);
//	double u_w = (4 * (0.95)) / denom;
//	double v_w = 9 / denom;
//	double denom2 = 13 * L;
//	double u_dash = (u + 13 * (u_w)*L) / denom2;
//	double v_dash = (v + 13 * (v_w)*L) / denom2;
//	if (L > 7.9996) {
//		double temp = (L + 16) / 116;
//		L_Y = pow(temp, 3);
//	}
//	else {
//		L_Y = L / 903.3;
//	}
//
//	L_X = L_Y *2.25*(u_dash / v_dash);
//	L_Z = L_Y*((3 - (.75*u_dash) - 5 * v_dash) / v_dash);
//	return std::make_tuple(L_X, L_Y, L_Z);
//
//}
//
//int main(int argc, char** argv) {
//	/*if (argc != 3) {
//	cout << argv[0] << ": "
//	<< "got " << argc - 1 << " arguments. Expecting two: width height."
//	<< endl;
//	return(-1);
//	}*/
//	int width = 500;
//	int height = 500;
//	//int width = atoi(argv[1]);
//	//int height = atoi(argv[2]);
//	int** RED1 = new int*[height];
//	int** GREEN1 = new int*[height];
//	int** BLUE1 = new int*[height];
//	int** RED2 = new int*[height];
//	int** GREEN2 = new int*[height];
//	int** BLUE2 = new int*[height];
//
//	for (int i = 0; i < height; i++) {
//		RED1[i] = new int[width];
//		GREEN1[i] = new int[width];
//		BLUE1[i] = new int[width];
//		RED2[i] = new int[width];
//		GREEN2[i] = new int[width];
//		BLUE2[i] = new int[width];
//	}
//
//	for (int i = 0; i < height; i++)
//		for (int j = 0; j < width; j++)
//		{
//			int r1, g1, b1;
//			int r2, g2, b2;
//
//			double x = (double)j / (double)width;
//			double y = (double)i / (double)height;
//			double Y = 1.0;
//
//			double L = 90;
//			double u = x * 512 - 255;
//			double v = y * 512 - 255;
//
//			double newX, newY, newZ;
//			newY = 0;
//			newX = 0;
//			newZ = 0;
//
//			newY = Y;
//			if (y != 0) {
//				newX = (x / y)*Y;
//				newZ = ((1 - x - y) / y)*Y;
//			}
//
//			double lin_R, lin_G, lin_B;
//			tie(lin_R, lin_G, lin_B) = convertXYZtoRGB(newX, newY, newZ);
//			//cout << lin_R;
//
//			double nonLin_R, nonLin_G, nonLin_B;
//			tie(nonLin_R, nonLin_G, nonLin_B) = convertLinRGB_2_NonlinRGB(lin_R, lin_G, lin_B);
//
//
//			double L_X, L_Y, L_Z;
//			tie(L_X, L_Y, L_Z) = convertLuv2XYZ(L, u, v);
//			double L_lin_R, L_lin_G, L_lin_B;
//			tie(L_lin_R, L_lin_G, L_lin_B) = convertXYZtoRGB(L_X, L_Y, L_Z);
//			double L_nonLin_R, L_nonLin_G, L_nonLin_B;
//			tie(L_nonLin_R, L_nonLin_G, L_nonLin_B) = convertLinRGB_2_NonlinRGB(L_lin_R, L_lin_G, L_lin_B);
//
//
//
//
//
//
//
//
//			//double newX = 
//
//
//			/* Your code should be placed here
//			It should translate xyY to byte sRGB
//			and Luv to byte sRGB
//			*/
//			//r1 = (int)(x * 255);
//			//g1 = (int)(y * 255);
//			//b1 = (int)(1.0 * 255);
//			r1 = nonLin_R*255;
//			g1 = nonLin_G*255;
//			b1 = nonLin_B*255;
//
//
//			r2 = L_nonLin_R*255;
//			g2 = L_nonLin_G*255;
//			b2 = L_nonLin_B*255;
//
//			//r2 = (int)(1.0 * 255);
//			//g2 = (int)(x * 255);
//			//b2 = (int)(y * 255);
//
//			// this is the end of your code
//
//			RED1[i][j] = r1;
//			GREEN1[i][j] = g1;
//			BLUE1[i][j] = b1;
//			RED2[i][j] = r2;
//			GREEN2[i][j] = g2;
//			BLUE2[i][j] = b2;
//		}
//
//
//	Mat R1(height, width, CV_8UC1);
//	Mat G1(height, width, CV_8UC1);
//	Mat B1(height, width, CV_8UC1);
//
//	Mat R2(height, width, CV_8UC1);
//	Mat G2(height, width, CV_8UC1);
//	Mat B2(height, width, CV_8UC1);
//
//	for (int i = 0; i < height; i++)
//		for (int j = 0; j < width; j++) {
//
//			R1.at<uchar>(i, j) = RED1[i][j];
//			G1.at<uchar>(i, j) = GREEN1[i][j];
//			B1.at<uchar>(i, j) = BLUE1[i][j];
//
//			R2.at<uchar>(i, j) = RED2[i][j];
//			G2.at<uchar>(i, j) = GREEN2[i][j];
//			B2.at<uchar>(i, j) = BLUE2[i][j];
//		}
//
//	Mat xyY;
//	Mat xyY_planes[] = { B1, G1, R1 };
//	merge(xyY_planes, 3, xyY);
//	namedWindow("xyY", CV_WINDOW_AUTOSIZE);
//	imshow("xyY", xyY);
//
//	Mat Luv;
//	Mat Luv_planes[] = { B2, G2, R2 };
//	merge(Luv_planes, 3, Luv);
//	namedWindow("Luv", CV_WINDOW_AUTOSIZE);
//	imshow("Luv", Luv);
//	waitKey(0); // Wait for a keystroke
//	return(0);
